#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ Ollama –ø—Ä—è–º–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö InfluxDB.
–°–æ–∑–¥–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–∞—Ä—Å–µ—Ä–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.
"""

import json
import sys
import requests
from pathlib import Path
from datetime import datetime, timezone
import csv
from io import StringIO


class InfluxDBReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö InfluxDB."""
    
    def __init__(self, config_file: str = 'config.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
        self.config = self.load_config(config_file)
        self.influxdb_url = self.config['influxdb']['url']
        self.token = self.config['influxdb']['token']
        self.org = self.config['influxdb']['org']
        self.bucket = self.config['influxdb']['bucket']
        
        # Headers –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'Authorization': f'Token {self.token}',
            'Content-Type': 'application/vnd.flux',
            'Accept': 'application/csv'
        }
        
        self.query_url = f"{self.influxdb_url}/api/v2/query"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        self.models_data = []
        self.sessions_data = []
        self.requests_data = []
        self.system_events = []
    
    def load_config(self, config_file: str) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        config_path = Path(config_file)
        if not config_path.exists():
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            sys.exit(1)
        
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def execute_flux_query(self, query: str) -> list:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç Flux –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
        try:
            params = {'org': self.org}
            response = requests.post(
                self.query_url,
                headers=self.headers,
                params=params,
                data=query,
                timeout=30
            )
            
            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º CSV –æ—Ç–≤–µ—Ç
                csv_data = response.text
                if not csv_data.strip():
                    return []
                
                reader = csv.DictReader(StringIO(csv_data))
                return list(reader)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []
    
    def fetch_models_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö."""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö...")
        
        query = f'''
        from(bucket: "{self.bucket}")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "ollama_sessions")
          |> group(columns: ["model", "model_sha256"])
          |> distinct(column: "model")
          |> keep(columns: ["model", "model_sha256"])
        '''
        
        self.models_data = self.execute_flux_query(query)
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.models_data)}")
    
    def fetch_sessions_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö."""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö...")
        
        query = f'''
        from(bucket: "{self.bucket}")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "ollama_sessions")
          |> group(columns: ["session_id", "_time", "model", "model_sha256", "pid"])
          |> pivot(rowKey:["session_id", "_time", "model", "model_sha256", "pid"], columnKey: ["_field"], valueColumn: "_value")
          |> sort(columns: ["_time"])
        '''
        
        self.sessions_data = self.execute_flux_query(query)
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(self.sessions_data)}")
    
    def fetch_requests_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö."""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö...")
        
        query = f'''
        from(bucket: "{self.bucket}")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "ollama_requests")
          |> filter(fn: (r) => r._field == "latency_seconds")
          |> sort(columns: ["_time"])
        '''
        
        self.requests_data = self.execute_flux_query(query)
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(self.requests_data)}")
    
    def fetch_system_events(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        
        query = f'''
        from(bucket: "{self.bucket}")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "ollama_system_events")
          |> sort(columns: ["_time"])
        '''
        
        self.system_events = self.execute_flux_query(query)
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(self.system_events)}")
    
    def format_memory_size(self, bytes_value: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏."""
        try:
            bytes_val = float(bytes_value)
            if bytes_val >= 1024**4:
                return f"{bytes_val / 1024**4:.1f} TB"
            elif bytes_val >= 1024**3:
                return f"{bytes_val / 1024**3:.1f} GB"
            elif bytes_val >= 1024**2:
                return f"{bytes_val / 1024**2:.1f} MB"
            elif bytes_val >= 1024:
                return f"{bytes_val / 1024:.1f} KB"
            else:
                return f"{int(bytes_val)} B"
        except:
            return str(bytes_value)
    
    def format_duration(self, seconds_value: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ)."""
        try:
            seconds = float(seconds_value)
            if seconds >= 60:
                minutes = int(seconds // 60)
                secs = seconds % 60
                return f"{minutes}m{secs:.0f}s"
            elif seconds >= 1:
                return f"{seconds:.9f}s"
            elif seconds >= 0.001:
                ms = seconds * 1000
                return f"{ms:.6f}ms"
            else:
                us = seconds * 1000000
                return f"{us:.3f}¬µs"
        except:
            return str(seconds_value)
    
    def format_timestamp(self, timestamp_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É."""
        try:
            from dateutil import tz
            # –ü–∞—Ä—Å–∏–º ISO timestamp –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É (–∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ)
            local_dt = dt.astimezone(tz.tzlocal())
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç—Ç–∞–ª–æ–Ω—É
            formatted = local_dt.strftime('%Y-%m-%dT%H:%M:%S%z')
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: +1000 -> +10:00
            if len(formatted) >= 5 and formatted[-5] in '+-':
                formatted = formatted[:-2] + ':' + formatted[-2:]
            return formatted
        except:
            return timestamp_str
    
    def group_requests_by_session(self) -> dict:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å–µ—Å—Å–∏—è–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∫ –≤ –ø–∞—Ä—Å–µ—Ä–µ)."""
        from dateutil import parser as dtparser
        
        requests_by_session = {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–π –≤ datetime –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        sessions_with_time = []
        for i, session in enumerate(self.sessions_data):
            try:
                session_time = dtparser.parse(session.get('_time', ''))
                sessions_with_time.append((i, session, session_time))
            except Exception:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sessions_with_time.sort(key=lambda x: x[2])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        requests_with_time = []
        for request in self.requests_data:
            try:
                request_time = dtparser.parse(request.get('_time', ''))
                requests_with_time.append((request, request_time))
            except Exception:
                continue
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        for idx, (session_idx, session, session_start) in enumerate(sessions_with_time):
            session_key = f"session_{session_idx + 1}"
            requests_by_session[session_key] = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–µ—Å—Å–∏–∏ (–Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏)
            session_end = None
            if idx + 1 < len(sessions_with_time):
                session_end = sessions_with_time[idx + 1][2]
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–∫–∞–∫ –≤ –ø–∞—Ä—Å–µ—Ä–µ)
            seen_requests = set()  # –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            for request, request_time in requests_with_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Å—Å–∏–∏
                if session_start and (not session_end or request_time < session_end):
                    if request_time >= session_start:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã - —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å status –∏ method
                        if request.get('status') is not None and request.get('method'):
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                            request_key = (
                                request.get('_time'),
                                request.get('status'),
                                request.get('method'),
                                request.get('endpoint'),
                                request.get('client_ip'),
                                request.get('_value')
                            )
                            if request_key not in seen_requests:
                                seen_requests.add(request_key)
                                requests_by_session[session_key].append(request)
        
        return requests_by_session
    
    def generate_models_table(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –º–æ–¥–µ–ª–µ–π."""
        if not self.models_data:
            return "–î–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ InfluxDB.\n"
        
        content = "## –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Ollama (–∏–∑ InfluxDB)\n\n"
        content += "| –ú–æ–¥–µ–ª—å | SHA256 | –ò—Å—Ç–æ—á–Ω–∏–∫ |\n"
        content += "|--------|--------|----------|\n"
        
        for model in self.models_data:
            model_name = model.get('model', 'unknown')
            sha256 = model.get('model_sha256', 'N/A')
            if sha256 and len(sha256) > 16:
                sha256 = sha256[:16] + "..."
            
            content += f"| {model_name} | {sha256} | InfluxDB |\n"
        
        content += "\n"
        return content
    
    def generate_sessions_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–µ—Å—Å–∏—è–º."""
        if not self.sessions_data:
            return "–î–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ InfluxDB.\n"
        
        content = "## –°–µ—Å—Å–∏–∏ Ollama (–∏–∑ InfluxDB)\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å–µ—Å—Å–∏—è–º
        requests_by_session = self.group_requests_by_session()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ
        from dateutil import parser as dtparser
        sessions_with_time = []
        for i, session in enumerate(self.sessions_data):
            try:
                session_time = dtparser.parse(session.get('_time', ''))
                sessions_with_time.append((i, session, session_time))
            except Exception:
                continue
        
        sessions_with_time.sort(key=lambda x: x[2])
        
        for session_num, (session_idx, session, session_time) in enumerate(sessions_with_time, 1):
            session_key = f"session_{session_idx + 1}"
            
            content += f"## –°–µ—Å—Å–∏—è {session_num}: {session.get('model', 'unknown')}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            content += f"*   **–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏:** {self.format_timestamp(session.get('_time', ''))}\n"
            content += f"*   **Session ID:** {session_key}\n"
            content += f"*   **PID –ø—Ä–æ—Ü–µ—Å—Å–∞ Ollama:** {session.get('pid', 'N/A')}\n"
            content += f"*   **–ú–æ–¥–µ–ª—å:** {session.get('model', 'N/A')}\n"
            content += f"*   **SHA256:** {session.get('model_sha256', 'N/A')}\n"
            content += f"*   **GPU:** {session.get('gpu_library', 'N/A')}\n"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            if session.get('ctx_size'):
                content += f"*   **CTX size:** {session.get('ctx_size')}\n"
            if session.get('batch_size'):
                content += f"*   **Batch size:** {session.get('batch_size')}\n"
            if session.get('gpu_layers'):
                content += f"*   **GPU layers:** {session.get('gpu_layers')}\n"
            if session.get('threads'):
                content += f"*   **Threads:** {session.get('threads')}\n"
            if session.get('parallel'):
                content += f"*   **Parallel:** {session.get('parallel')}\n"
            
            # –ü–∞–º—è—Ç—å
            content += "\n### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n\n"
            if session.get('vram_available_bytes'):
                vram_available = self.format_memory_size(session['vram_available_bytes'])
                content += f"*   **VRAM –¥–æ—Å—Ç—É–ø–Ω–æ:** {vram_available}\n"
            
            if session.get('vram_required_bytes'):
                vram_required = self.format_memory_size(session['vram_required_bytes'])
                content += f"*   **VRAM —Ç—Ä–µ–±—É–µ—Ç—Å—è:** {vram_required}\n"
            
            # –°–ª–æ–∏ –º–æ–¥–µ–ª–∏
            if session.get('model_layers_total') or session.get('model_layers_offloaded'):
                content += "\n### –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ª–æ—ë–≤:\n\n"
                content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                content += "|----------|----------|\n"
                
                if session.get('model_layers_total'):
                    content += f"| –í—Å–µ–≥–æ —Å–ª–æ–µ–≤ | {session['model_layers_total']} |\n"
                if session.get('model_layers_offloaded'):
                    content += f"| Offloaded –Ω–∞ GPU | {session['model_layers_offloaded']} |\n"
                
                content += "\n"
            
            # –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            if session.get('loading_duration_seconds'):
                duration = self.format_duration(session['loading_duration_seconds'])
                content += f"*   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ runner: {duration}\n"
            
            # API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            session_requests = requests_by_session.get(session_key, [])
            if session_requests:
                content += "\n### –û–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ API-–∑–∞–ø—Ä–æ—Å—ã (GIN)\n"
                content += "| –í—Ä–µ–º—è | –°—Ç–∞—Ç—É—Å | –ó–∞–¥–µ—Ä–∂–∫–∞ | IP | –ú–µ—Ç–æ–¥ | –ü—É—Ç—å |\n"
                content += "|---|---|---|---|---|---|\n"
                
                for req in session_requests:
                    time_str = self.format_timestamp(req.get('_time', ''))
                    status = req.get('status', 'N/A')
                    latency = self.format_duration(req.get('_value', '0'))
                    ip = req.get('client_ip', 'N/A')
                    method = req.get('method', 'N/A')
                    path = req.get('endpoint', 'N/A')
                    
                    content += f"| {time_str} | {status} | {latency} | {ip} | {method} | {path} |\n"
                
                content += "\n"
            
            content += "---\n\n"
        
        return content
    
    def generate_system_events_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º."""
        if not self.system_events:
            return "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ InfluxDB.\n"
        
        content = "## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–∑ InfluxDB)\n\n"
        content += "| –í—Ä–µ–º—è | –¢–∏–ø | –°–æ–±—ã—Ç–∏–µ | –î–µ—Ç–∞–ª–∏ |\n"
        content += "|-------|-----|---------|--------|\n"
        
        for event in self.system_events:
            time_str = self.format_timestamp(event.get('_time', ''))
            event_type = event.get('event_type', 'N/A')
            event_name = event.get('event_name', 'N/A')
            details = event.get('details', '')
            
            content += f"| {time_str} | {event_type} | {event_name} | {details} |\n"
        
        content += "\n"
        return content
    
    def generate_summary_stats(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        content = "## –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑ InfluxDB)\n\n"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_models = len(set(session.get('model', '') for session in self.sessions_data))
        total_sessions = len(self.sessions_data)
        total_requests = len(self.requests_data)
        total_events = len(self.system_events)
        
        # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.requests_data:
            latencies = []
            for req in self.requests_data:
                try:
                    latency = float(req.get('_value', 0))
                    latencies.append(latency)
                except:
                    pass
            
            avg_latency = sum(latencies) / len(latencies) if latencies else 0
            max_latency = max(latencies) if latencies else 0
            min_latency = min(latencies) if latencies else 0
        else:
            avg_latency = max_latency = min_latency = 0
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        total_loading_time = 0
        for session in self.sessions_data:
            try:
                loading_time = float(session.get('loading_duration_seconds', 0))
                total_loading_time += loading_time
            except:
                pass
        
        content += f"- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:** {total_models}\n"
        content += f"- **–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:** {total_sessions}\n"
        content += f"- **–í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤:** {total_requests}\n"
        content += f"- **–°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:** {total_events}\n"
        content += f"- **–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:** {self.format_duration(str(total_loading_time))}\n"
        
        if self.requests_data:
            content += f"- **–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:** {self.format_duration(str(avg_latency))}\n"
            content += f"- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:** {self.format_duration(str(max_latency))}\n"
            content += f"- **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:** {self.format_duration(str(min_latency))}\n"
        
        content += "\n"
        return content
    
    def generate_full_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç."""
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö InfluxDB...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.fetch_models_data()
        self.fetch_sessions_data()
        self.fetch_requests_data()
        self.fetch_system_events()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report.append("# –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã Ollama (–∏–∑ InfluxDB)")
        report.append("")
        report.append(f"**–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** InfluxDB ({self.influxdb_url})")
        report.append(f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {self.org}")
        report.append(f"**Bucket:** {self.bucket}")
        report.append("")
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append(self.generate_summary_stats())
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        report.append(self.generate_models_table())
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        report.append(self.generate_system_events_report())
        
        # –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–π
        report.append(self.generate_sessions_report())
        
        # –ü–æ–¥–≤–∞–ª
        report.append("---")
        report.append("")
        report.append("*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö InfluxDB*")
        report.append(f"*–°–∫—Ä–∏–ø—Ç: generate_report_from_influxdb.py*")
        
        return "\n".join(report)
    
    def save_report(self, report_content: str, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª."""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"reports/influxdb_report_{timestamp}.md"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path(filename).parent.mkdir(exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–∑ InfluxDB')
    parser.add_argument('--config', '-c', default='config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--output', '-o', 
                       help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: reports/influxdb_report_TIMESTAMP.md)')
    parser.add_argument('--print', action='store_true',
                       help='–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = InfluxDBReportGenerator(args.config)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_content = generator.generate_full_report()
        
        if args.print:
            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print("\n" + "="*80)
            print(report_content)
            print("="*80)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = generator.save_report(report_content, args.output)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö InfluxDB!")
            print(f"üìÑ –§–∞–π–ª: {filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            lines_count = len(report_content.split('\n'))
            chars_count = len(report_content)
            print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: {lines_count} —Å—Ç—Ä–æ–∫, {chars_count} —Å–∏–º–≤–æ–ª–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()